/**
 * @fileoverview added by tsickle
 * Generated from: lib/interfaces/cropper.settings.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
export class CropperSettings {
    constructor() {
        // From options
        this.format = 'png';
        this.maintainAspectRatio = true;
        this.transform = {};
        this.aspectRatio = 1;
        this.resizeToWidth = 0;
        this.resizeToHeight = 0;
        this.cropperMinWidth = 0;
        this.cropperMinHeight = 0;
        this.cropperMaxHeight = 0;
        this.cropperMaxWidth = 0;
        this.cropperStaticWidth = 0;
        this.cropperStaticHeight = 0;
        this.canvasRotation = 0;
        this.initialStepSize = 3;
        this.roundCropper = false;
        this.onlyScaleDown = false;
        this.imageQuality = 92;
        this.autoCrop = true;
        this.backgroundColor = undefined;
        this.containWithinAspectRatio = false;
        this.hideResizeSquares = false;
        this.alignImage = 'center';
        // Internal
        this.cropperScaledMinWidth = 20;
        this.cropperScaledMinHeight = 20;
        this.cropperScaledMaxWidth = 20;
        this.cropperScaledMaxHeight = 20;
        this.stepSize = this.initialStepSize;
    }
    /**
     * @param {?} options
     * @return {?}
     */
    setOptions(options) {
        Object.keys(options)
            .filter((/**
         * @param {?} k
         * @return {?}
         */
        (k) => k in this))
            .forEach((/**
         * @param {?} k
         * @return {?}
         */
        (k) => this[k] = options[k]));
        this.validateOptions();
    }
    /**
     * @param {?} changes
     * @return {?}
     */
    setOptionsFromChanges(changes) {
        Object.keys(changes)
            .filter((/**
         * @param {?} k
         * @return {?}
         */
        (k) => k in this))
            .forEach((/**
         * @param {?} k
         * @return {?}
         */
        (k) => this[k] = changes[k].currentValue));
        this.validateOptions();
    }
    /**
     * @private
     * @return {?}
     */
    validateOptions() {
        if (this.maintainAspectRatio && !this.aspectRatio) {
            throw new Error('`aspectRatio` should > 0 when `maintainAspectRatio` is enabled');
        }
    }
}
if (false) {
    /** @type {?} */
    CropperSettings.prototype.format;
    /** @type {?} */
    CropperSettings.prototype.maintainAspectRatio;
    /** @type {?} */
    CropperSettings.prototype.transform;
    /** @type {?} */
    CropperSettings.prototype.aspectRatio;
    /** @type {?} */
    CropperSettings.prototype.resizeToWidth;
    /** @type {?} */
    CropperSettings.prototype.resizeToHeight;
    /** @type {?} */
    CropperSettings.prototype.cropperMinWidth;
    /** @type {?} */
    CropperSettings.prototype.cropperMinHeight;
    /** @type {?} */
    CropperSettings.prototype.cropperMaxHeight;
    /** @type {?} */
    CropperSettings.prototype.cropperMaxWidth;
    /** @type {?} */
    CropperSettings.prototype.cropperStaticWidth;
    /** @type {?} */
    CropperSettings.prototype.cropperStaticHeight;
    /** @type {?} */
    CropperSettings.prototype.canvasRotation;
    /** @type {?} */
    CropperSettings.prototype.initialStepSize;
    /** @type {?} */
    CropperSettings.prototype.roundCropper;
    /** @type {?} */
    CropperSettings.prototype.onlyScaleDown;
    /** @type {?} */
    CropperSettings.prototype.imageQuality;
    /** @type {?} */
    CropperSettings.prototype.autoCrop;
    /** @type {?} */
    CropperSettings.prototype.backgroundColor;
    /** @type {?} */
    CropperSettings.prototype.containWithinAspectRatio;
    /** @type {?} */
    CropperSettings.prototype.hideResizeSquares;
    /** @type {?} */
    CropperSettings.prototype.alignImage;
    /** @type {?} */
    CropperSettings.prototype.cropperScaledMinWidth;
    /** @type {?} */
    CropperSettings.prototype.cropperScaledMinHeight;
    /** @type {?} */
    CropperSettings.prototype.cropperScaledMaxWidth;
    /** @type {?} */
    CropperSettings.prototype.cropperScaledMaxHeight;
    /** @type {?} */
    CropperSettings.prototype.stepSize;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY3JvcHBlci5zZXR0aW5ncy5qcyIsInNvdXJjZVJvb3QiOiIvVXNlcnMvbWF3aS9Qcm9qZWN0cy9uZ3gtaW1hZ2UtY3JvcHBlci9wcm9qZWN0cy9uZ3gtaW1hZ2UtY3JvcHBlci9zcmMvIiwic291cmNlcyI6WyJsaWIvaW50ZXJmYWNlcy9jcm9wcGVyLnNldHRpbmdzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O0FBSUEsTUFBTSxPQUFPLGVBQWU7SUFBNUI7O1FBR0UsV0FBTSxHQUFpQixLQUFLLENBQUM7UUFDN0Isd0JBQW1CLEdBQUcsSUFBSSxDQUFDO1FBQzNCLGNBQVMsR0FBbUIsRUFBRSxDQUFDO1FBQy9CLGdCQUFXLEdBQUcsQ0FBQyxDQUFDO1FBQ2hCLGtCQUFhLEdBQUcsQ0FBQyxDQUFDO1FBQ2xCLG1CQUFjLEdBQUcsQ0FBQyxDQUFDO1FBQ25CLG9CQUFlLEdBQUcsQ0FBQyxDQUFDO1FBQ3BCLHFCQUFnQixHQUFHLENBQUMsQ0FBQztRQUNyQixxQkFBZ0IsR0FBRyxDQUFDLENBQUM7UUFDckIsb0JBQWUsR0FBRyxDQUFDLENBQUM7UUFDcEIsdUJBQWtCLEdBQUcsQ0FBQyxDQUFDO1FBQ3ZCLHdCQUFtQixHQUFHLENBQUMsQ0FBQztRQUN4QixtQkFBYyxHQUFHLENBQUMsQ0FBQztRQUNuQixvQkFBZSxHQUFHLENBQUMsQ0FBQztRQUNwQixpQkFBWSxHQUFHLEtBQUssQ0FBQztRQUNyQixrQkFBYSxHQUFHLEtBQUssQ0FBQztRQUN0QixpQkFBWSxHQUFHLEVBQUUsQ0FBQztRQUNsQixhQUFRLEdBQUcsSUFBSSxDQUFDO1FBQ2hCLG9CQUFlLEdBQVcsU0FBUyxDQUFDO1FBQ3BDLDZCQUF3QixHQUFHLEtBQUssQ0FBQztRQUNqQyxzQkFBaUIsR0FBRyxLQUFLLENBQUM7UUFDMUIsZUFBVSxHQUFzQixRQUFRLENBQUM7O1FBR3pDLDBCQUFxQixHQUFHLEVBQUUsQ0FBQztRQUMzQiwyQkFBc0IsR0FBRyxFQUFFLENBQUM7UUFDNUIsMEJBQXFCLEdBQUcsRUFBRSxDQUFDO1FBQzNCLDJCQUFzQixHQUFHLEVBQUUsQ0FBQztRQUM1QixhQUFRLEdBQUcsSUFBSSxDQUFDLGVBQWUsQ0FBQztJQXFCbEMsQ0FBQzs7Ozs7SUFuQkMsVUFBVSxDQUFDLE9BQWdDO1FBQ3pDLE1BQU0sQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDO2FBQ2pCLE1BQU07Ozs7UUFBQyxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQyxJQUFJLElBQUksRUFBQzthQUN4QixPQUFPOzs7O1FBQUMsQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsR0FBRyxPQUFPLENBQUMsQ0FBQyxDQUFDLEVBQUMsQ0FBQztRQUN4QyxJQUFJLENBQUMsZUFBZSxFQUFFLENBQUM7SUFDekIsQ0FBQzs7Ozs7SUFFRCxxQkFBcUIsQ0FBQyxPQUFzQjtRQUMxQyxNQUFNLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQzthQUNqQixNQUFNOzs7O1FBQUMsQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUMsSUFBSSxJQUFJLEVBQUM7YUFDeEIsT0FBTzs7OztRQUFDLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEdBQUcsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDLFlBQVksRUFBQyxDQUFDO1FBQ3JELElBQUksQ0FBQyxlQUFlLEVBQUUsQ0FBQztJQUN6QixDQUFDOzs7OztJQUVPLGVBQWU7UUFDckIsSUFBSSxJQUFJLENBQUMsbUJBQW1CLElBQUksQ0FBQyxJQUFJLENBQUMsV0FBVyxFQUFFO1lBQ2pELE1BQU0sSUFBSSxLQUFLLENBQUMsZ0VBQWdFLENBQUMsQ0FBQztTQUNuRjtJQUNILENBQUM7Q0FDRjs7O0lBakRDLGlDQUE2Qjs7SUFDN0IsOENBQTJCOztJQUMzQixvQ0FBK0I7O0lBQy9CLHNDQUFnQjs7SUFDaEIsd0NBQWtCOztJQUNsQix5Q0FBbUI7O0lBQ25CLDBDQUFvQjs7SUFDcEIsMkNBQXFCOztJQUNyQiwyQ0FBcUI7O0lBQ3JCLDBDQUFvQjs7SUFDcEIsNkNBQXVCOztJQUN2Qiw4Q0FBd0I7O0lBQ3hCLHlDQUFtQjs7SUFDbkIsMENBQW9COztJQUNwQix1Q0FBcUI7O0lBQ3JCLHdDQUFzQjs7SUFDdEIsdUNBQWtCOztJQUNsQixtQ0FBZ0I7O0lBQ2hCLDBDQUFvQzs7SUFDcEMsbURBQWlDOztJQUNqQyw0Q0FBMEI7O0lBQzFCLHFDQUF5Qzs7SUFHekMsZ0RBQTJCOztJQUMzQixpREFBNEI7O0lBQzVCLGdEQUEyQjs7SUFDM0IsaURBQTRCOztJQUM1QixtQ0FBZ0MiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDcm9wcGVyT3B0aW9ucywgT3V0cHV0Rm9ybWF0IH0gZnJvbSAnLi9jcm9wcGVyLW9wdGlvbnMuaW50ZXJmYWNlJztcbmltcG9ydCB7IEltYWdlVHJhbnNmb3JtIH0gZnJvbSAnLi9pbWFnZS10cmFuc2Zvcm0uaW50ZXJmYWNlJztcbmltcG9ydCB7IFNpbXBsZUNoYW5nZXMgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcblxuZXhwb3J0IGNsYXNzIENyb3BwZXJTZXR0aW5ncyB7XG5cbiAgLy8gRnJvbSBvcHRpb25zXG4gIGZvcm1hdDogT3V0cHV0Rm9ybWF0ID0gJ3BuZyc7XG4gIG1haW50YWluQXNwZWN0UmF0aW8gPSB0cnVlO1xuICB0cmFuc2Zvcm06IEltYWdlVHJhbnNmb3JtID0ge307XG4gIGFzcGVjdFJhdGlvID0gMTtcbiAgcmVzaXplVG9XaWR0aCA9IDA7XG4gIHJlc2l6ZVRvSGVpZ2h0ID0gMDtcbiAgY3JvcHBlck1pbldpZHRoID0gMDtcbiAgY3JvcHBlck1pbkhlaWdodCA9IDA7XG4gIGNyb3BwZXJNYXhIZWlnaHQgPSAwO1xuICBjcm9wcGVyTWF4V2lkdGggPSAwO1xuICBjcm9wcGVyU3RhdGljV2lkdGggPSAwO1xuICBjcm9wcGVyU3RhdGljSGVpZ2h0ID0gMDtcbiAgY2FudmFzUm90YXRpb24gPSAwO1xuICBpbml0aWFsU3RlcFNpemUgPSAzO1xuICByb3VuZENyb3BwZXIgPSBmYWxzZTtcbiAgb25seVNjYWxlRG93biA9IGZhbHNlO1xuICBpbWFnZVF1YWxpdHkgPSA5MjtcbiAgYXV0b0Nyb3AgPSB0cnVlO1xuICBiYWNrZ3JvdW5kQ29sb3I6IHN0cmluZyA9IHVuZGVmaW5lZDtcbiAgY29udGFpbldpdGhpbkFzcGVjdFJhdGlvID0gZmFsc2U7XG4gIGhpZGVSZXNpemVTcXVhcmVzID0gZmFsc2U7XG4gIGFsaWduSW1hZ2U6ICdsZWZ0JyB8ICdjZW50ZXInID0gJ2NlbnRlcic7XG5cbiAgLy8gSW50ZXJuYWxcbiAgY3JvcHBlclNjYWxlZE1pbldpZHRoID0gMjA7XG4gIGNyb3BwZXJTY2FsZWRNaW5IZWlnaHQgPSAyMDtcbiAgY3JvcHBlclNjYWxlZE1heFdpZHRoID0gMjA7XG4gIGNyb3BwZXJTY2FsZWRNYXhIZWlnaHQgPSAyMDtcbiAgc3RlcFNpemUgPSB0aGlzLmluaXRpYWxTdGVwU2l6ZTtcblxuICBzZXRPcHRpb25zKG9wdGlvbnM6IFBhcnRpYWw8Q3JvcHBlck9wdGlvbnM+KTogdm9pZCB7XG4gICAgT2JqZWN0LmtleXMob3B0aW9ucylcbiAgICAgIC5maWx0ZXIoKGspID0+IGsgaW4gdGhpcylcbiAgICAgIC5mb3JFYWNoKChrKSA9PiB0aGlzW2tdID0gb3B0aW9uc1trXSk7XG4gICAgdGhpcy52YWxpZGF0ZU9wdGlvbnMoKTtcbiAgfVxuXG4gIHNldE9wdGlvbnNGcm9tQ2hhbmdlcyhjaGFuZ2VzOiBTaW1wbGVDaGFuZ2VzKTogdm9pZCB7XG4gICAgT2JqZWN0LmtleXMoY2hhbmdlcylcbiAgICAgIC5maWx0ZXIoKGspID0+IGsgaW4gdGhpcylcbiAgICAgIC5mb3JFYWNoKChrKSA9PiB0aGlzW2tdID0gY2hhbmdlc1trXS5jdXJyZW50VmFsdWUpO1xuICAgIHRoaXMudmFsaWRhdGVPcHRpb25zKCk7XG4gIH1cblxuICBwcml2YXRlIHZhbGlkYXRlT3B0aW9ucygpOiB2b2lkIHtcbiAgICBpZiAodGhpcy5tYWludGFpbkFzcGVjdFJhdGlvICYmICF0aGlzLmFzcGVjdFJhdGlvKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ2Bhc3BlY3RSYXRpb2Agc2hvdWxkID4gMCB3aGVuIGBtYWludGFpbkFzcGVjdFJhdGlvYCBpcyBlbmFibGVkJyk7XG4gICAgfVxuICB9XG59XG4iXX0=